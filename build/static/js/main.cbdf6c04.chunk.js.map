{"version":3,"sources":["redux/users/usersSelectors.js","routes/mainRoutes.js","redux/users/usersActions.js","redux/users/usersOperations.js","service/contactsPrepations.js","redux/contacts/contactsActions.js","redux/contacts/contactsReduser.js","redux/middlewares/middlewares.js","redux/redusers/redusers.js","redux/users/usersRedusers.js","redux/store.js","components/navigation/Navigation.js","components/routesTypes/PrivateRoute.js","components/routesTypes/PublicRoute.js","components/routesList/RoutesList.js","components/App.js","index.js"],"names":["getIsLogged","state","user","isLogged","getToken","usersData","token","getUserName","name","getUserEmail","email","mainRoutes","path","exact","type","restricted","component","lazy","signupUsersRequest","createAction","signupUsersSuccess","signupUsersError","loginUsersRequest","loginUsersSuccess","loginUsersError","logoutUsersRequest","logoutUsersSuccess","logoutUsersError","refreshUsersRequest","refreshUsersSuccess","refreshUsersError","usersSignup","userData","dispatch","axios","post","BASE_URL","users","signup","then","data","catch","error","usersLogin","login","usersRefresh","defaults","headers","common","refresh","usersLogout","logout","checkIsDoublingContacts","contacts","newName","some","toLowerCase","contactsToRender","filter","includes","title","search","allContacts","getContactsRequest","getContactsSuccess","getContactsError","addContactRequest","addContactSuccess","addContactError","removeContactRequest","removeContactSuccess","removeContactError","setFilter","items","createReducer","_","payload","contact","id","contactsReduser","combineReducers","middlewarePreventContactsDuplication","store","next","action","getState","isAlreadyInContacts","alert","dataUI","alertMsg","isLoadingReducer","persistConfig","key","version","storage","whitelist","persistedUsersData","persistReducer","usersRedusers","configureStore","reducer","isLoading","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","persistor","persistStore","Navigation","routes","map","route","to","PrivateRoute","useSelector","PublicRoute","RoutesList","fallback","App","useDispatch","useEffect","userName","userEmail","onClick","ReactDOM","render","loading","document","getElementById"],"mappings":"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","file":"static/js/main.cbdf6c04.chunk.js","sourcesContent":["export const getIsLogged = (state) => state.user.isLogged;\r\nexport const getToken = (state) => state.user.usersData.token;\r\nexport const getUserName = (state) => state.user.usersData.name;\r\nexport const getUserEmail = (state) => state.user.usersData.email;\r\n","import { lazy } from \"react\";\r\n\r\nexport const mainRoutes = [\r\n  {\r\n    name: \"Home\",\r\n    path: \"/\",\r\n    exact: true,\r\n    type: \"public\",\r\n    restricted: false,\r\n    component: lazy(() =>\r\n      import(\"../pages/HomePage\" /* webpackChunkName: \"HomePage\" */)\r\n    ),\r\n  },\r\n\r\n  {\r\n    name: \"Log in\",\r\n    path: \"/login\",\r\n    type: \"public\",\r\n    restricted: true,\r\n    component: lazy(() =>\r\n      import(\"../pages/LoginPage\" /* webpackChunkName: \"LoginPage\" */)\r\n    ),\r\n  },\r\n\r\n  {\r\n    name: \"Sign up\",\r\n    path: \"/register\",\r\n    type: \"public\",\r\n    restricted: true,\r\n    component: lazy(() =>\r\n      import(\"../pages/SignupPage\" /* webpackChunkName: \"RegisterPage\" */)\r\n    ),\r\n  },\r\n\r\n  {\r\n    name: \"Contacts\",\r\n    path: \"/contacts\",\r\n    type: \"private\",\r\n    component: lazy(() =>\r\n      import(\"../pages/ContactsPage\" /* webpackChunkName: \"ContactsPage\" */)\r\n    ),\r\n  },\r\n];\r\n","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const signupUsersRequest = createAction(\"users/signupUsersRequest\");\r\nexport const signupUsersSuccess = createAction(\"users/signupUsersSuccess\");\r\nexport const signupUsersError = createAction(\"users/signupUsersError\");\r\n\r\nexport const loginUsersRequest = createAction(\"users/loginUsersRequest\");\r\nexport const loginUsersSuccess = createAction(\"users/loginUsersSuccess\");\r\nexport const loginUsersError = createAction(\"users/loginUsersError\");\r\n\r\nexport const logoutUsersRequest = createAction(\"users/logoutUsersRequest\");\r\nexport const logoutUsersSuccess = createAction(\"users/logoutUsersSuccess\");\r\nexport const logoutUsersError = createAction(\"users/logoutUsersError\");\r\n\r\nexport const refreshUsersRequest = createAction(\"users/refreshUsersRequest\");\r\nexport const refreshUsersSuccess = createAction(\"users/refreshUsersSuccess\");\r\nexport const refreshUsersError = createAction(\"users/refreshUsersError\");\r\n","import {\r\n  signupUsersRequest,\r\n  signupUsersSuccess,\r\n  signupUsersError,\r\n  loginUsersRequest,\r\n  loginUsersSuccess,\r\n  loginUsersError,\r\n  logoutUsersRequest,\r\n  logoutUsersSuccess,\r\n  logoutUsersError,\r\n  refreshUsersRequest,\r\n  refreshUsersSuccess,\r\n  refreshUsersError,\r\n} from \"./usersActions\";\r\nimport axios from \"axios\";\r\nimport { BASE_URL, users } from \"../../data/db.json\";\r\n\r\nexport const usersSignup = (userData) => (dispatch) => {\r\n  dispatch(signupUsersRequest());\r\n  axios\r\n    .post(BASE_URL + users.signup, userData)\r\n    .then(({ data }) => {\r\n      dispatch(signupUsersSuccess(data));\r\n    })\r\n    .catch((error) => dispatch(signupUsersError(error)));\r\n};\r\n\r\nexport const usersLogin = (userData) => (dispatch) => {\r\n  dispatch(loginUsersRequest());\r\n  axios\r\n    .post(BASE_URL + users.login, userData)\r\n    .then(({ data }) => {\r\n      dispatch(loginUsersSuccess(data));\r\n    })\r\n    .catch((error) => dispatch(loginUsersError(error)));\r\n};\r\n\r\nexport const usersRefresh = (token) => (dispatch) => {\r\n  dispatch(refreshUsersRequest());\r\n  axios.defaults.headers.common[\"Authorization\"] = token;\r\n  axios(BASE_URL + users.refresh)\r\n    .then(({ data }) => {\r\n      dispatch(refreshUsersSuccess(data));\r\n    })\r\n    .catch((error) => dispatch(refreshUsersError(error)));\r\n};\r\n\r\nexport const usersLogout = (token) => (dispatch) => {\r\n  dispatch(logoutUsersRequest());\r\n  axios.defaults.headers.common[\"Authorization\"] = token;\r\n  axios\r\n    .post(BASE_URL + users.logout)\r\n    .then(({ data }) => {\r\n      dispatch(logoutUsersSuccess(data));\r\n    })\r\n    .catch((error) => dispatch(logoutUsersError(error)));\r\n};\r\n","import { allContacts, search } from \"../data/dataUI.json\";\r\n\r\nconst checkIsDoublingContacts = (contacts, newName) => {\r\n  const isAlreadyInContacts = contacts.some(\r\n    ({ name }) => name.toLowerCase() === newName.toLowerCase()\r\n  );\r\n  return isAlreadyInContacts;\r\n};\r\n\r\nconst contactsToRender = (contacts, filter) => {\r\n  if (!filter) {\r\n    return { contacts, title: `${allContacts}` };\r\n  }\r\n  const filteredContacts = contacts.filter(({ name }) =>\r\n    name.toLowerCase().includes(filter.toLowerCase())\r\n  );\r\n  return { contacts: filteredContacts, title: `${search}` };\r\n};\r\n\r\n//===============================================================\r\n// const contactsToRender = (state) => {\r\n//   const contacts = state.contacts.items;\r\n//   const filter = state.contacts.filter;\r\n//   if (!filter) {\r\n//     return { contacts, title: `${allContacts}` };\r\n//   }\r\n\r\n//   const filteredContacts = contacts.filter(({ name }) =>\r\n//     name.toLowerCase().includes(filter.toLowerCase())\r\n//   );\r\n\r\n//   return { contacts: filteredContacts, title: `${search}` };\r\n// };\r\n\r\nexport { checkIsDoublingContacts, contactsToRender };\r\n","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const getContactsRequest = createAction(\"contacts/getContactsRequest\");\r\nexport const getContactsSuccess = createAction(\"contacts/getContactsSuccess\");\r\nexport const getContactsError = createAction(\"contacts/getContactsError\");\r\n\r\nexport const addContactRequest = createAction(\"contacts/addContactRequest\");\r\nexport const addContactSuccess = createAction(\"contacts/addContactSuccess\");\r\nexport const addContactError = createAction(\"contacts/addContactError\");\r\n\r\nexport const removeContactRequest = createAction(\r\n  \"contacts/removeContactRequest\"\r\n);\r\nexport const removeContactSuccess = createAction(\r\n  \"contacts/removeContactSuccess\"\r\n);\r\nexport const removeContactError = createAction(\"contacts/removeContactError\");\r\n\r\nexport const setFilter = createAction(\"contacts/setFilter\");\r\n","import { createReducer, combineReducers } from \"@reduxjs/toolkit\";\r\nimport {\r\n  addContactSuccess,\r\n  getContactsSuccess,\r\n  removeContactSuccess,\r\n  setFilter,\r\n} from \"./contactsActions\";\r\n\r\nconst items = createReducer([], {\r\n  [getContactsSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state = [], { payload }) => [...state, payload],\r\n  [removeContactSuccess]: (state = [], { payload }) =>\r\n    state.filter((contact) => contact.id !== payload),\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [setFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst contactsReduser = combineReducers({ items, filter });\r\n\r\nexport default contactsReduser;\r\n","import { checkIsDoublingContacts } from \"../../service/contactsPrepations\";\r\nimport { addContactRequest } from \"../contacts/contactsActions\";\r\nimport dataUI from \"../../data/dataUI.json\";\r\n\r\nconst middlewarePreventContactsDuplication = (store) => (next) => (action) => {\r\n  if (action.type !== addContactRequest.type) {\r\n    next(action);\r\n    return;\r\n  }\r\n  const { items: contacts } = store.getState().contacts;\r\n  const { name } = action.payload;\r\n  const isAlreadyInContacts = checkIsDoublingContacts(contacts, name);\r\n  if (isAlreadyInContacts) {\r\n    alert(`${name} ${dataUI.alertMsg}`);\r\n    return isAlreadyInContacts;\r\n  }\r\n  next(action);\r\n};\r\n\r\nexport default middlewarePreventContactsDuplication;\r\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport {\r\n  addContactError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  getContactsError,\r\n  getContactsRequest,\r\n  getContactsSuccess,\r\n  removeContactError,\r\n  removeContactRequest,\r\n  removeContactSuccess,\r\n} from \"../contacts/contactsActions\";\r\nimport {\r\n  signupUsersError,\r\n  signupUsersRequest,\r\n  signupUsersSuccess,\r\n  loginUsersRequest,\r\n  loginUsersSuccess,\r\n  loginUsersError,\r\n  logoutUsersRequest,\r\n  logoutUsersSuccess,\r\n  logoutUsersError,\r\n  refreshUsersRequest,\r\n  refreshUsersSuccess,\r\n  refreshUsersError,\r\n} from \"../users/usersActions\";\r\n\r\nconst isLoadingReducer = createReducer(false, {\r\n  [getContactsRequest]: () => true,\r\n  [getContactsSuccess]: () => false,\r\n  [getContactsError]: () => false,\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [removeContactRequest]: () => true,\r\n  [removeContactSuccess]: () => false,\r\n  [removeContactError]: () => false,\r\n  [signupUsersRequest]: () => true,\r\n  [signupUsersSuccess]: () => false,\r\n  [signupUsersError]: () => false,\r\n  [loginUsersRequest]: () => true,\r\n  [loginUsersSuccess]: () => false,\r\n  [loginUsersError]: () => false,\r\n  [logoutUsersRequest]: () => true,\r\n  [logoutUsersSuccess]: () => false,\r\n  [logoutUsersError]: () => false,\r\n  [refreshUsersRequest]: () => true,\r\n  [refreshUsersSuccess]: () => false,\r\n  [refreshUsersError]: () => false,\r\n});\r\n\r\nexport default isLoadingReducer;\r\n","import { createReducer, combineReducers } from \"@reduxjs/toolkit\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport { persistReducer } from \"redux-persist\";\r\nimport {\r\n  signupUsersSuccess,\r\n  loginUsersSuccess,\r\n  logoutUsersSuccess,\r\n  refreshUsersSuccess,\r\n} from \"./usersActions\";\r\n\r\nconst persistConfig = {\r\n  key: \"token\",\r\n  version: 1,\r\n  storage,\r\n  whitelist: \"token\",\r\n};\r\n\r\nconst usersData = createReducer(\r\n  {},\r\n  {\r\n    [signupUsersSuccess]: (_, { payload }) => payload,\r\n    [loginUsersSuccess]: (_, { payload }) => payload,\r\n    [logoutUsersSuccess]: () => ({}),\r\n    [refreshUsersSuccess]: (state, { payload }) => ({ ...payload, ...state }),\r\n  }\r\n);\r\n\r\nconst isLogged = createReducer(false, {\r\n  [signupUsersSuccess]: () => true,\r\n  [loginUsersSuccess]: () => true,\r\n  [logoutUsersSuccess]: () => false,\r\n  [refreshUsersSuccess]: () => true,\r\n});\r\n\r\nconst persistedUsersData = persistReducer(persistConfig, usersData);\r\n\r\nconst usersRedusers = combineReducers({\r\n  usersData: persistedUsersData,\r\n  isLogged,\r\n});\r\n\r\nexport default usersRedusers;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport {\r\n  persistStore,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport contactsReduser from \"./contacts/contactsReduser\";\r\nimport middlewarePreventContactsDuplication from \"./middlewares/middlewares\";\r\nimport isLoadingReducer from \"./redusers/redusers\";\r\nimport usersRedusers from \"./users/usersRedusers\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    user: usersRedusers,\r\n    contacts: contactsReduser,\r\n    isLoading: isLoadingReducer,\r\n  },\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }).concat(middlewarePreventContactsDuplication),\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport { store, persistor };\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst Navigation = ({ routes }) => {\r\n  return routes.map((route) => (\r\n    <NavLink to={route.path} exact key={route.path}>\r\n      {route.name}\r\n    </NavLink>\r\n  ));\r\n};\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Redirect, Route } from \"react-router\";\r\nimport { getIsLogged } from \"../../redux/users/usersSelectors\";\r\n\r\nconst PrivateRoute = ({ route }) => {\r\n  const isLogged = useSelector(getIsLogged);\r\n  return isLogged ? (\r\n    <Route component={route.component} />\r\n  ) : (\r\n    <Redirect to=\"/login\" />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Redirect, Route } from \"react-router\";\r\nimport { getIsLogged } from \"../../redux/users/usersSelectors\";\r\n\r\nconst PublicRoute = ({ route }) => {\r\n  const isLogged = useSelector(getIsLogged);\r\n  return isLogged && route.restricted ? (\r\n    <Redirect to=\"/\" />\r\n  ) : (\r\n    <Route component={route.component} />\r\n  );\r\n};\r\n\r\nexport default PublicRoute;\r\n","import React, { Suspense } from \"react\";\r\nimport { Switch } from \"react-router\";\r\nimport PrivateRoute from \"../routesTypes/PrivateRoute\";\r\nimport PublicRoute from \"../routesTypes/PublicRoute\";\r\n\r\nconst RoutesList = ({ routes }) => {\r\n  return (\r\n    <Suspense fallback={<h2>Loading...</h2>}>\r\n      <Switch>\r\n        {routes.map((route) => {\r\n          return route.type === \"public\" ? (\r\n            <PublicRoute\r\n              exact\r\n              path={route.path}\r\n              route={route}\r\n              key={route.name}\r\n            />\r\n          ) : (\r\n            <PrivateRoute\r\n              exact\r\n              path={route.path}\r\n              route={route}\r\n              key={route.name}\r\n            />\r\n          );\r\n        })}\r\n      </Switch>\r\n    </Suspense>\r\n  );\r\n};\r\n\r\nexport default RoutesList;\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Navigation from \"./navigation/Navigation\";\r\nimport { mainRoutes } from \"../routes/mainRoutes\";\r\nimport RoutesList from \"./routesList/RoutesList\";\r\nimport {\r\n  getIsLogged,\r\n  getToken,\r\n  getUserEmail,\r\n  getUserName,\r\n} from \"../redux/users/usersSelectors\";\r\nimport { usersRefresh, usersLogout } from \"../redux/users/usersOperations\";\r\n\r\nconst App = () => {\r\n  const token = useSelector(getToken);\r\n  const isLogged = useSelector(getIsLogged);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    token && dispatch(usersRefresh(token));\r\n  }, [dispatch, token]);\r\n\r\n  const userName = useSelector(getUserName);\r\n  const userEmail = useSelector(getUserEmail);\r\n\r\n  const onClick = () => {\r\n    dispatch(usersLogout(token));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isLogged && (\r\n        <>\r\n          <p>\r\n            Hello, <b>{userName}</b> !\r\n          </p>\r\n          <p>\r\n            You are logged in as: <b>{userEmail}</b>\r\n          </p>\r\n          <button type=\"button\" onClick={onClick}>\r\n            Log out\r\n          </button>\r\n          <br />\r\n          <hr />\r\n        </>\r\n      )}\r\n      <Navigation routes={mainRoutes} />\r\n      <hr />\r\n      <RoutesList routes={mainRoutes} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n//=====================================================\r\n// import React, { useEffect } from \"react\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// import Title from \"./title/Title\";\r\n// import ContactForm from \"./contactForm/ContactForm\";\r\n// import Filter from \"./filter/Filter\";\r\n// import Notification from \"./notification/Notification\";\r\n// import ContactsList from \"./contactsList/ContactsList\";\r\n// import styles from \"./container/Container.module.css\";\r\n// import dataUI from \"../data/dataUI.json\";\r\n// import { fetchContacts } from \"../redux/contacts/contactsOperations/contactsOperations\";\r\n// import { getIsLoading } from \"../redux/contacts/contactsSelectors/contactsSelectors\";\r\n\r\n// const { titleMain, titleSecondary, isLoadingNow } = dataUI;\r\n\r\n// const App = () => {\r\n//   const dispatch = useDispatch();\r\n//   const isLoading = useSelector(getIsLoading);\r\n\r\n//   useEffect(() => {\r\n//     dispatch(fetchContacts());\r\n//   }, [dispatch]);\r\n\r\n//   return (\r\n//     <div className={styles.container}>\r\n//       <Title title={titleMain} />\r\n//       <ContactForm isLoading={isLoading} />\r\n//       <Title title={titleSecondary} />\r\n//       <Filter />\r\n//       {isLoading ? <Notification title={isLoadingNow} /> : <ContactsList />}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport \"modern-normalize/modern-normalize.css\";\nimport { store, persistor } from \"./redux/store\";\nimport App from \"./components/App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </PersistGate>\n  </Provider>,\n\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}